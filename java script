// Initialize Lucide icons
lucide.createIcons();

// DOM Elements
const app = document.getElementById('app');
const themeToggle = document.getElementById('themeToggle');
const panicButton = document.getElementById('panicButton');
const panicModal = document.getElementById('panicModal');
const cancelPanic = document.getElementById('cancelPanic');
const breathingButton = document.getElementById('breathingButton');
const breathCircle = document.getElementById('breathCircle');
const breathCount = document.getElementById('breathCount');
const noteInput = document.getElementById('noteInput');
const addNoteButton = document.getElementById('addNoteButton');
const notesList = document.getElementById('notesList');
const reminderInput = document.getElementById('reminderInput');
const addReminderButton = document.getElementById('addReminderButton');
const remindersList = document.getElementById('remindersList');

// State
let darkMode = false;
let isBreathing = false;
let breathingInterval;
let notes = [];
let reminders = [];

// Theme Toggle
themeToggle.addEventListener('click', () => {
  darkMode = !darkMode;
  app.setAttribute('data-theme', darkMode ? 'dark' : 'light');
  document.querySelector('.moon-icon').classList.toggle('hidden');
  document.querySelector('.sun-icon').classList.toggle('hidden');
});

// Panic Button
panicButton.addEventListener('click', () => {
  panicModal.classList.add('active');
});

cancelPanic.addEventListener('click', () => {
  panicModal.classList.remove('active');
});

// Breathing Exercise
breathingButton.addEventListener('click', () => {
  if (isBreathing) return;
  
  isBreathing = true;
  let count = 0;
  breathingButton.textContent = 'Breathing...';
  breathCircle.classList.add('breathing');
  
  breathingInterval = setInterval(() => {
    count++;
    breathCount.textContent = count;
    
    if (count >= 10) {
      clearInterval(breathingInterval);
      isBreathing = false;
      breathingButton.textContent = 'Start Breathing';
      breathCircle.classList.remove('breathing');
      breathCount.textContent = '0';
    }
  }, 4000);
});

// Notes
function addNote() {
  const text = noteInput.value.trim();
  if (!text) return;
  
  notes.push(text);
  noteInput.value = '';
  renderNotes();
}

function renderNotes() {
  notesList.innerHTML = notes
    .map(note => `<div class="note-item">${note}</div>`)
    .join('');
}

addNoteButton.addEventListener('click', addNote);
noteInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') addNote();
});

// Reminders
function addReminder() {
  const text = reminderInput.value.trim();
  if (!text) return;
  
  reminders.push(text);
  reminderInput.value = '';
  renderReminders();
}

function renderReminders() {
  remindersList.innerHTML = reminders
    .map(reminder => `<div class="reminder-item">${reminder}</div>`)
    .join('');
}

addReminderButton.addEventListener('click', addReminder);
reminderInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') addReminder();
});

// Clock & Date
function updateDateTime() {
  const now = new Date();
  document.getElementById('time').textContent = now.toLocaleTimeString();
  document.getElementById('date').textContent = now.toLocaleDateString(undefined, {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

setInterval(updateDateTime, 1000);
updateDateTime();

// Simulated Health Data
function updateHealthStats() {
  const heartRate = document.getElementById('heartRate');
  const bloodPressure = document.getElementById('bloodPressure');
  const stressLevel = document.getElementById('stressLevel');
  const stressBar = document.getElementById('stressBar');
  
  let hr = 75;
  let systolic = 120;
  let diastolic = 80;
  let stress = 50;
  
  setInterval(() => {
    // Simulate changes in health data
    hr = Math.max(60, Math.min(100, hr + (Math.random() - 0.5) * 5));
    systolic = Math.max(90, Math.min(140, systolic + (Math.random() - 0.5) * 3));
    diastolic = Math.max(60, Math.min(90, diastolic + (Math.random() - 0.5) * 2));
    stress = Math.max(20, Math.min(80, stress + (Math.random() - 0.5) * 10));
    
    // Update UI
    heartRate.textContent = `${Math.round(hr)} BPM`;
    bloodPressure.textContent = `${Math.round(systolic)}/${Math.round(diastolic)}`;
    stressLevel.textContent = `${Math.round(stress)}%`;
    stressBar.style.width = `${stress}%`;
    stressBar.style.backgroundColor = `hsl(${120 - stress * 1.2}, 70%, 50%)`;
  }, 5000);
}

updateHealthStats();
